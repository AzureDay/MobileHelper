<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description" xml:space="preserve">
    <value>"Привет! Мы — шведско-украинская компания 
Beetroot. Наша команда объединяет веб-разработчиков, дизайнеров и иллюстраторов, работающих над интересными проектами для международных клиентов. Открыв свой первый офис в Одессе в 2012 году, сегодня Beetroot — это большая семья из более чем двухсот человек, которые поддерживают друг друга и варят вкусный борщ в Стокгольме, Киеве, Полтаве, Ивано-Франковске, Харькове и, конечно, Одессе. А еще, Beetroot имеет свою собственную образовательную программу — Beetroot Academy. Это школы программирования и веб-дизайна, которые расположены в девяти городах Украины и стремятся обучать, вдохновлять, и помогать всем, кто мечтает попасть в мир ИТ.
История создания Beetroot:
16-го сентября, оставив позади 1600 километров дороги из Санкт-Петербурга, двое друзей-шведов, Андреас и Густав, приехали в Киев. В тот момент в их распоряжении были лишь старые, потрепанные Жигули и неукротимое желание изменить общество, в котором они жили. Ну и еще, пожалуй, паспорта. А также зарегистрированная в Швеции компания Beetroot. А больше — ничего. Уже через 24 часа у них появился свой офис. А точнее, маленькая комнатка в офисе их друзей, в которой они могли работать и жить.
Киев стал отправным пунктом для Beetroot, но уже в феврале 2013 Андреас и Густав отправились в Одессу. Туда их позвали новые возможности, а может и желание быть ближе к морю. Сняв небольшую комнату для офиса, двое предпринимателей начали думать о своем будущем. Оно рисовалось им полным талантливых, влюбленных в свое дело людей. А еще там должно было быть уютное ощущение дома и взаимопомощи. Они мечтали о таких командах, которые будут брать ответственность за свою работу и никогда не побоятся откровенно высказать свое мнение по любому поводу. Конечно, в их мечтах было еще кое-что о совместных посиделках в пабах, но это уже другая история. Понемногу, эти идеи начали превращаться в то, что мы теперь зовем культурой Beetroot. Возможно, именно благодаря этой уникальной культуре команда Beetroot начала стремительно расти. И вот сегодня мы имеем более двухсот энергичных и жизнерадостных людей в пяти городах Украины — Одессе, Полтаве, Ивано-Франковске, Харькове и Киеве — и продолжаем приглашать новые таланты в нашу семью."</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Beetroot</value>
  </data>
</root>